{"version":3,"sources":["src/server.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;;;;;AAKA;;;;;AAKA;;;;;;AAOA,IAAM,QAAQ,GAAG;AACf,EAAA,SAAS,EAAE,OAAO,CAAC,GAAR,CAAY,UAAZ,IAA0B,kCADtB;AAEf,EAAA,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAR,CAAY,YAAb,EAA2B,EAA3B,CAAR,IAA0C,MAFxC;AAGf,EAAA,KAAK,EAAE;AAHQ,CAAjB;AAMA;;;;;;;;AAOO,SAAS,WAAT,CAAqB,GAArB,EAAsD;AAAA,MAA5B,OAA4B,uEAAlB,EAAkB;AAAA,MAAd,OAAc,uEAAJ,EAAI;;AAC3D;AACA,MAAM,MAAM,qBACP,QADO;AAEV,IAAA,OAAO,EAAP;AAFU,IAAZ;;AAKA,SAAO,OAAO,CAAC,GAAf;AACA,SAAO,OAAO,CAAC,GAAf;AAEA,MAAM,SAAS,oBACb,sBAAa,IAAb,CACE,OADF,EAEE,MAAM,CAAC,SAFT,EAGE;AACE,IAAA,SAAS,YAAK,MAAM,CAAC,WAAZ;AADX,GAHF,CADa,CAAf;AAUA,EAAA,GAAG,CAAC,MAAJ,CAAW,OAAO,CAAC,MAAR,GAAiB,gBAAjB,GAAoC,gBAA/C,EAAiE,SAAjE;AACD;AAED;;;;;;;AAKO,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC1B,EAAA,GAAG,CAAC,MAAJ,CAAW,gBAAX,EAA6B,QAA7B;AACD;AAED;;;;;;;;AAQA;;;;;;;AAKe,SAAS,gBAAT,GAAwC;AAAA,MAAd,OAAc,uEAAJ,EAAI;;AACrD,MAAM,MAAM,qBACP,QADO;AAEV,IAAA,OAAO,EAAP;AAFU,IAAZ;;AAKA,SAAO,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AAAA,uBAMrB,GANqB,CAEvB,OAFuB;AAAA,QAGrB,cAHqB,gBAGrB,cAHqB;AAAA,QAIrB,cAJqB,gBAIrB,cAJqB;AAQzB,QAAM,SAAS,GAAG,UAAG,cAAc,IAAI,cAArB,EAAsC,OAAtC,CAA8C,SAA9C,EAAyD,EAAzD,CAAlB;;AAEA,QAAI,CAAC,SAAL,EAAgB;AACd,MAAA,GAAG,CAAC,IAAJ,GAAW,IAAX;AACA,MAAA,IAAI;AACJ;AACD;;AAED,QAAI;AACF,UAAM,OAAO,GAAG,sBAAa,MAAb,CACd,SADc,EAEd,MAAM,CAAC,SAFO,CAAhB;;AADE,UAMM,GANN,GAMc,OANd,CAMM,GANN;AAQF,UAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,KAAa,IAAxB,CAAZ;AACA,UAAM,IAAI,GAAG,GAAG,GAAG,GAAnB;AACA,UAAM,SAAS,GAAI,MAAM,CAAC,WAAP,GAAqB,CAAtB,GAA2B,CAA7C;;AAEA,UAAI,IAAI,GAAG,SAAX,EAAsB;AACpB,QAAA,WAAW,CAAC,GAAD,oBAAW,OAAX,qBAA2B,MAA3B;AAAmC,UAAA,MAAM,EAAE;AAA3C,WAAX;AACD;;AAED,MAAA,GAAG,CAAC,IAAJ,qBACK,OADL;AAIA,MAAA,IAAI;AACL,KArBD,CAqBE,OAAO,KAAP,EAAc;AACd,UAAI,MAAM,CAAC,KAAX,EAAkB;AAChB;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACD;;AAED,MAAA,MAAM,CAAC,GAAD,CAAN;AAEA,MAAA,GAAG,CAAC,IAAJ,GAAW,IAAX;AACA,MAAA,IAAI;AACL;AACF,GAhDD;AAiDD","file":"server.js","sourcesContent":["import src from 'secure-random-string';\nimport jsonWebToken from 'jsonwebtoken';\n\n/**\n * @typedef {Object} ExpressResponse Express-like response object\n * @property {Function} header\n */\n\n/**\n * @typedef {Object} ExpressRequest Express-like response object\n * @property {Object} header\n */\n\n/**\n * @typedef {Object} Options JWT options\n * @property {string} jwtSecret Defaults to process.env.JWT_SECRET or random string\n * @property {number} jwtLifetime Token exp in seconds\n * @property {boolean} debug Log jwt decode errors to console, defaults to false.\n */\n\nconst defaults = {\n  jwtSecret: process.env.JWT_SECRET || src(),\n  jwtLifetime: parseInt(process.env.JWT_LIFETIME, 10) || 259200,\n  debug: false,\n};\n\n/**\n * @function createToken\n * @param  {ExpressResponse} res Express-like response object\n * @param  {Object} payload JWT payload\n * @param  {Options} options Jwt options\n * @return {void} It sets the correct header on the response object\n */\nexport function createToken(res, payload = {}, options = {}) {\n  /* eslint-disable no-param-reassign */\n  const values = {\n    ...defaults,\n    options,\n  };\n\n  delete payload.exp;\n  delete payload.iat;\n\n  const JWT_TOKEN = `Bearer ${\n    jsonWebToken.sign(\n      payload,\n      values.jwtSecret,\n      {\n        expiresIn: `${values.jwtLifetime} seconds`,\n      },\n    )\n  }`;\n\n  res.header(options.update ? 'X-Token-Update' : 'X-Token-Create', JWT_TOKEN);\n}\n\n/**\n * @function logout\n * @param  {ExpressResponse} res Express-like response object\n * @return {void} It sets the correct header on the response object\n */\nexport function logout(res) {\n  res.header('X-Token-Remove', 'remove');\n}\n\n/**\n * @typedef {Function} FetchAuthManagerMiddleware\n * @param {ExpressRequest} req Express-like request object\n * @param {ExpressResponse} res Express-like response object\n * @param {Function} next Expres next function\n * @return {void} Returns void and calls express`s next() regardless\n */\n\n/**\n * @function fetchAuthManager\n * @param  {Options} options Jwt options\n * @return {FetchAuthManagerMiddleware} Middleware to handle auth\n */\nexport default function fetchAuthManager(options = {}) {\n  const values = {\n    ...defaults,\n    options,\n  };\n\n  return (req, res, next) => {\n    const {\n      headers: {\n        authentication,\n        Authentication,\n      },\n    } = req;\n\n    const JWT_TOKEN = `${authentication || Authentication}`.replace('Bearer ', '');\n\n    if (!JWT_TOKEN) {\n      req.user = null;\n      next();\n      return;\n    }\n\n    try {\n      const decoded = jsonWebToken.decode(\n        JWT_TOKEN,\n        values.jwtSecret,\n      );\n\n      const { exp } = decoded;\n\n      const now = Math.round(Date.now() / 1000);\n      const diff = exp - now;\n      const reference = (values.jwtLifetime / 3) * 2;\n\n      if (diff < reference) {\n        createToken(req, { ...decoded }, { ...values, update: true });\n      }\n\n      req.user = {\n        ...decoded,\n      };\n\n      next();\n    } catch (error) {\n      if (values.debug) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n\n      logout(res);\n\n      req.user = null;\n      next();\n    }\n  };\n}\n"]}